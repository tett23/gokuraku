---
source: packages/parser/tests/type_check_test.rs
expression: ir
input_file: packages/parser/fixtures/pds/6.pds
---
Ok(
    SymbolTable {
        type_symbols: {
            Ident(
                "id",
            ): TypeAbstruction {
                arg: None,
                expr: Value(
                    Bottom,
                ),
            },
            Ident(
                "ternary",
            ): TypeAbstruction {
                arg: Some(
                    Value(
                        Bottom,
                    ),
                ),
                expr: Abstruction(
                    TypeAbstruction {
                        arg: Some(
                            Value(
                                Bottom,
                            ),
                        ),
                        expr: Abstruction(
                            TypeAbstruction {
                                arg: Some(
                                    Value(
                                        Bottom,
                                    ),
                                ),
                                expr: Value(
                                    Bottom,
                                ),
                            },
                        ),
                    },
                ),
            },
            Ident(
                "unary",
            ): TypeAbstruction {
                arg: Some(
                    Value(
                        Bottom,
                    ),
                ),
                expr: Value(
                    Bottom,
                ),
            },
            Ident(
                "binary",
            ): TypeAbstruction {
                arg: Some(
                    Value(
                        Bottom,
                    ),
                ),
                expr: Abstruction(
                    TypeAbstruction {
                        arg: Some(
                            Value(
                                Bottom,
                            ),
                        ),
                        expr: Value(
                            Bottom,
                        ),
                    },
                ),
            },
        },
        data_lattice: BoundedDataLattice {
            top: [
                DataLattice {
                    elements: [
                        DataElement {
                            ident: ExistsIdent(
                                "Unit",
                            ),
                            value: Unit,
                        },
                    ],
                    union_elements: None,
                    intersection_elements: None,
                },
                DataLattice {
                    elements: [
                        DataElement {
                            ident: ExistsIdent(
                                "Int",
                            ),
                            value: Unit,
                        },
                    ],
                    union_elements: None,
                    intersection_elements: None,
                },
            ],
            botom: [
                DataLattice {
                    elements: [
                        DataElement {
                            ident: ExistsIdent(
                                "Unit",
                            ),
                            value: Unit,
                        },
                    ],
                    union_elements: None,
                    intersection_elements: None,
                },
                DataLattice {
                    elements: [
                        DataElement {
                            ident: ExistsIdent(
                                "Int",
                            ),
                            value: Unit,
                        },
                    ],
                    union_elements: None,
                    intersection_elements: None,
                },
            ],
        },
    },
)
