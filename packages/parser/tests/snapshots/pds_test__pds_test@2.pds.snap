---
source: packages/parser/tests/pds_test.rs
expression: ast
input_file: packages/parser/fixtures/pds/2.pds
---
Module {
    statements: [
        Assign(
            Assign {
                ident: Ident(
                    "f",
                ),
                args: AssignArgs {
                    patterns: [
                        Literal(
                            Int(
                                1,
                            ),
                        ),
                        Literal(
                            Int(
                                2,
                            ),
                        ),
                    ],
                },
                expr: Apply(
                    Apply {
                        abstruction: Abstruction {
                            arg: Some(
                                Ident(
                                    Ident(
                                        "a",
                                    ),
                                ),
                            ),
                            expr: Ident(
                                Ident(
                                    "*",
                                ),
                            ),
                        },
                        expr: Ident(
                            Ident(
                                "b",
                            ),
                        ),
                    },
                ),
                where_clause: Module {
                    statements: [],
                },
            },
        ),
        TraitDef(
            TraitDef {
                trait_constraints: [],
                constructor: DataConstructor {
                    modifier: None,
                    ident: ExistsIdent(
                        ExistsIdent(
                            "Show",
                        ),
                    ),
                    args: [
                        Constructor(
                            DataConstructor {
                                modifier: None,
                                ident: ForallIdent(
                                    ForallIdent(
                                        "a",
                                    ),
                                ),
                                args: [],
                            },
                        ),
                    ],
                },
                where_clause: Module {
                    statements: [
                        AssignDef(
                            AssignDef {
                                ident: Ident(
                                    "a",
                                ),
                                expr: TypeExpr {
                                    trait_constraints: [],
                                    eta_envs: EtaEnvs(
                                        [],
                                    ),
                                    expr: Literal(
                                        Constructor(
                                            DataConstructor {
                                                modifier: None,
                                                ident: ExistsIdent(
                                                    ExistsIdent(
                                                        "Int",
                                                    ),
                                                ),
                                                args: [],
                                            },
                                        ),
                                    ),
                                },
                            },
                        ),
                        Assign(
                            Assign {
                                ident: Ident(
                                    "(++)",
                                ),
                                args: AssignArgs {
                                    patterns: [],
                                },
                                expr: Apply(
                                    Apply {
                                        abstruction: Abstruction {
                                            arg: Some(
                                                Ident(
                                                    Ident(
                                                        "a",
                                                    ),
                                                ),
                                            ),
                                            expr: Ident(
                                                Ident(
                                                    "->",
                                                ),
                                            ),
                                        },
                                        expr: Apply(
                                            Apply {
                                                abstruction: Abstruction {
                                                    arg: Some(
                                                        Ident(
                                                            Ident(
                                                                "a",
                                                            ),
                                                        ),
                                                    ),
                                                    expr: Ident(
                                                        Ident(
                                                            "->",
                                                        ),
                                                    ),
                                                },
                                                expr: Ident(
                                                    Ident(
                                                        "a",
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                where_clause: Module {
                                    statements: [],
                                },
                            },
                        ),
                    ],
                },
            },
        ),
        Assign(
            Assign {
                ident: Ident(
                    "(++)",
                ),
                args: AssignArgs {
                    patterns: [],
                },
                expr: Ident(
                    Ident(
                        "a",
                    ),
                ),
                where_clause: Module {
                    statements: [],
                },
            },
        ),
        LineComment(
            LineComment(
                "lineComment(78, 95)",
            ),
        ),
        LineComment(
            LineComment(
                "lineComment(95, 115)",
            ),
        ),
        LineComment(
            LineComment(
                "lineComment(115, 128)",
            ),
        ),
        LineComment(
            LineComment(
                "lineComment(128, 148)",
            ),
        ),
        LineComment(
            LineComment(
                "lineComment(148, 175)",
            ),
        ),
        LineComment(
            LineComment(
                "lineComment(175, 199)",
            ),
        ),
        LineComment(
            LineComment(
                "lineComment(199, 215)",
            ),
        ),
        LineComment(
            LineComment(
                "lineComment(216, 239)",
            ),
        ),
        LineComment(
            LineComment(
                "lineComment(240, 262)",
            ),
        ),
        LineComment(
            LineComment(
                "lineComment(262, 275)",
            ),
        ),
        LineComment(
            LineComment(
                "lineComment(275, 297)",
            ),
        ),
        LineComment(
            LineComment(
                "lineComment(297, 313)",
            ),
        ),
        LineComment(
            LineComment(
                "lineComment(313, 316)",
            ),
        ),
        LineComment(
            LineComment(
                "lineComment(316, 340)",
            ),
        ),
        LineComment(
            LineComment(
                "lineComment(340, 358)",
            ),
        ),
        LineComment(
            LineComment(
                "lineComment(358, 363)",
            ),
        ),
        AssignDef(
            AssignDef {
                ident: Ident(
                    "repeat",
                ),
                expr: TypeExpr {
                    trait_constraints: [
                        TraitConstraint {
                            ident: TraitIdent(
                                "Identity",
                            ),
                            arg: ForallIdent(
                                "a",
                            ),
                        },
                    ],
                    eta_envs: EtaEnvs(
                        [],
                    ),
                    expr: Arrow(
                        Arrow(
                            Literal(
                                Constructor(
                                    DataConstructor {
                                        modifier: None,
                                        ident: ForallIdent(
                                            ForallIdent(
                                                "a",
                                            ),
                                        ),
                                        args: [],
                                    },
                                ),
                            ),
                            Literal(
                                Constructor(
                                    DataConstructor {
                                        modifier: None,
                                        ident: ForallIdent(
                                            ForallIdent(
                                                "a",
                                            ),
                                        ),
                                        args: [],
                                    },
                                ),
                            ),
                        ),
                        Literal(
                            Constructor(
                                DataConstructor {
                                    modifier: None,
                                    ident: ExistsIdent(
                                        ExistsIdent(
                                            "Nat",
                                        ),
                                    ),
                                    args: [],
                                },
                            ),
                        ),
                    ),
                },
            },
        ),
        Assign(
            Assign {
                ident: Ident(
                    "repeat",
                ),
                args: AssignArgs {
                    patterns: [
                        Bind(
                            Ident(
                                "f",
                            ),
                        ),
                        Literal(
                            Int(
                                0,
                            ),
                        ),
                    ],
                },
                expr: Ident(
                    Ident(
                        "id",
                    ),
                ),
                where_clause: Module {
                    statements: [],
                },
            },
        ),
        Assign(
            Assign {
                ident: Ident(
                    "repeat",
                ),
                args: AssignArgs {
                    patterns: [
                        Bind(
                            Ident(
                                "f",
                            ),
                        ),
                        Bind(
                            Ident(
                                "n",
                            ),
                        ),
                    ],
                },
                expr: Ident(
                    Ident(
                        "f",
                    ),
                ),
                where_clause: Module {
                    statements: [],
                },
            },
        ),
        AssignDef(
            AssignDef {
                ident: Ident(
                    "repeatText",
                ),
                expr: TypeExpr {
                    trait_constraints: [],
                    eta_envs: EtaEnvs(
                        [],
                    ),
                    expr: Literal(
                        Constructor(
                            DataConstructor {
                                modifier: None,
                                ident: ExistsIdent(
                                    ExistsIdent(
                                        "Text",
                                    ),
                                ),
                                args: [],
                            },
                        ),
                    ),
                },
            },
        ),
        Assign(
            Assign {
                ident: Ident(
                    "repeatText",
                ),
                args: AssignArgs {
                    patterns: [
                        Bind(
                            Ident(
                                "s",
                            ),
                        ),
                        Bind(
                            Ident(
                                "n",
                            ),
                        ),
                    ],
                },
                expr: Ident(
                    Ident(
                        "repeat",
                    ),
                ),
                where_clause: Module {
                    statements: [],
                },
            },
        ),
        AssignDef(
            AssignDef {
                ident: Ident(
                    "hardbrakeN",
                ),
                expr: TypeExpr {
                    trait_constraints: [],
                    eta_envs: EtaEnvs(
                        [],
                    ),
                    expr: Literal(
                        Constructor(
                            DataConstructor {
                                modifier: None,
                                ident: ExistsIdent(
                                    ExistsIdent(
                                        "Nat",
                                    ),
                                ),
                                args: [],
                            },
                        ),
                    ),
                },
            },
        ),
        Assign(
            Assign {
                ident: Ident(
                    "hardbreakN",
                ),
                args: AssignArgs {
                    patterns: [
                        Bind(
                            Ident(
                                "n",
                            ),
                        ),
                    ],
                },
                expr: Ident(
                    Ident(
                        "repeatText",
                    ),
                ),
                where_clause: Module {
                    statements: [],
                },
            },
        ),
        Assign(
            Assign {
                ident: Ident(
                    "hardbreak",
                ),
                args: AssignArgs {
                    patterns: [],
                },
                expr: Ident(
                    Ident(
                        "hardbreakN",
                    ),
                ),
                where_clause: Module {
                    statements: [],
                },
            },
        ),
        AssignDef(
            AssignDef {
                ident: Ident(
                    "(|)",
                ),
                expr: TypeExpr {
                    trait_constraints: [],
                    eta_envs: EtaEnvs(
                        [],
                    ),
                    expr: Arrow(
                        Literal(
                            Constructor(
                                DataConstructor {
                                    modifier: None,
                                    ident: ForallIdent(
                                        ForallIdent(
                                            "a",
                                        ),
                                    ),
                                    args: [],
                                },
                            ),
                        ),
                        Arrow(
                            Arrow(
                                Literal(
                                    Constructor(
                                        DataConstructor {
                                            modifier: None,
                                            ident: ForallIdent(
                                                ForallIdent(
                                                    "a",
                                                ),
                                            ),
                                            args: [],
                                        },
                                    ),
                                ),
                                Literal(
                                    Constructor(
                                        DataConstructor {
                                            modifier: None,
                                            ident: ForallIdent(
                                                ForallIdent(
                                                    "b",
                                                ),
                                            ),
                                            args: [],
                                        },
                                    ),
                                ),
                            ),
                            Literal(
                                Constructor(
                                    DataConstructor {
                                        modifier: None,
                                        ident: ForallIdent(
                                            ForallIdent(
                                                "b",
                                            ),
                                        ),
                                        args: [],
                                    },
                                ),
                            ),
                        ),
                    ),
                },
            },
        ),
        Assign(
            Assign {
                ident: Ident(
                    "(|)",
                ),
                args: AssignArgs {
                    patterns: [
                        Bind(
                            Ident(
                                "f",
                            ),
                        ),
                        Bind(
                            Ident(
                                "g",
                            ),
                        ),
                    ],
                },
                expr: Ident(
                    Ident(
                        "g",
                    ),
                ),
                where_clause: Module {
                    statements: [],
                },
            },
        ),
        AssignDef(
            AssignDef {
                ident: Ident(
                    "main",
                ),
                expr: TypeExpr {
                    trait_constraints: [],
                    eta_envs: EtaEnvs(
                        [
                            EtaEnv {
                                ident: HandlerIdent(
                                    "write",
                                ),
                                expr: CoroutineType {
                                    resume: Arrow(
                                        Literal(
                                            Constructor(
                                                DataConstructor {
                                                    modifier: None,
                                                    ident: ExistsIdent(
                                                        ExistsIdent(
                                                            "Text",
                                                        ),
                                                    ),
                                                    args: [],
                                                },
                                            ),
                                        ),
                                        Literal(
                                            Constructor(
                                                DataConstructor {
                                                    modifier: None,
                                                    ident: ExistsIdent(
                                                        ExistsIdent(
                                                            "IO",
                                                        ),
                                                    ),
                                                    args: [],
                                                },
                                            ),
                                        ),
                                    ),
                                    ret: Literal(
                                        Constructor(
                                            DataConstructor {
                                                modifier: None,
                                                ident: ExistsIdent(
                                                    ExistsIdent(
                                                        "IO",
                                                    ),
                                                ),
                                                args: [],
                                            },
                                        ),
                                    ),
                                },
                            },
                            EtaEnv {
                                ident: HandlerIdent(
                                    "read",
                                ),
                                expr: CoroutineType {
                                    resume: Literal(
                                        Constructor(
                                            DataConstructor {
                                                modifier: None,
                                                ident: ExistsIdent(
                                                    ExistsIdent(
                                                        "IO",
                                                    ),
                                                ),
                                                args: [],
                                            },
                                        ),
                                    ),
                                    ret: Literal(
                                        Constructor(
                                            DataConstructor {
                                                modifier: None,
                                                ident: ExistsIdent(
                                                    ExistsIdent(
                                                        "IO",
                                                    ),
                                                ),
                                                args: [],
                                            },
                                        ),
                                    ),
                                },
                            },
                            EtaEnv {
                                ident: HandlerIdent(
                                    "none",
                                ),
                                expr: CoroutineType {
                                    resume: Literal(
                                        Tuple(
                                            0,
                                            [],
                                        ),
                                    ),
                                    ret: Literal(
                                        Tuple(
                                            0,
                                            [],
                                        ),
                                    ),
                                },
                            },
                        ],
                    ),
                    expr: Literal(
                        Constructor(
                            DataConstructor {
                                modifier: None,
                                ident: ExistsIdent(
                                    ExistsIdent(
                                        "IO",
                                    ),
                                ),
                                args: [],
                            },
                        ),
                    ),
                },
            },
        ),
        Assign(
            Assign {
                ident: Ident(
                    "main",
                ),
                args: AssignArgs {
                    patterns: [],
                },
                expr: ApplyEff(
                    ApplyEff {
                        ident: HandlerIdent(
                            "*write",
                        ),
                        expr: Literal(
                            Text(
                                "Hello world",
                            ),
                        ),
                    },
                ),
                where_clause: Module {
                    statements: [],
                },
            },
        ),
        LineComment(
            LineComment(
                "lineComment(748, 766)",
            ),
        ),
        LineComment(
            LineComment(
                "lineComment(766, 796)",
            ),
        ),
        LineComment(
            LineComment(
                "lineComment(796, 820)",
            ),
        ),
        LineComment(
            LineComment(
                "lineComment(820, 823)",
            ),
        ),
        LineComment(
            LineComment(
                "lineComment(823, 877)",
            ),
        ),
        LineComment(
            LineComment(
                "lineComment(877, 916)",
            ),
        ),
        LineComment(
            LineComment(
                "lineComment(916, 921)",
            ),
        ),
        Assign(
            Assign {
                ident: Ident(
                    "main",
                ),
                args: AssignArgs {
                    patterns: [],
                },
                expr: ApplyEff(
                    ApplyEff {
                        ident: HandlerIdent(
                            "*write",
                        ),
                        expr: Literal(
                            Text(
                                "Hello world",
                            ),
                        ),
                    },
                ),
                where_clause: Module {
                    statements: [],
                },
            },
        ),
    ],
}
