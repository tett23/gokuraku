---
source: packages/parser/tests/pds_test.rs
expression: ast
input_file: packages/parser/fixtures/pds/1.pds
---
Module {
    statements: [
        Assign(
            Assign {
                ident: Ident(
                    "a",
                ),
                args: AssignArgs {
                    patterns: [],
                },
                expr: Literal(
                    Tuple(
                        1,
                        [
                            Literal(
                                Int(
                                    1,
                                ),
                            ),
                        ],
                    ),
                ),
                where_clause: Module {
                    statements: [],
                },
            },
        ),
        AssignDef(
            AssignDef {
                ident: Ident(
                    "f",
                ),
                expr: TypeExpr {
                    trait_constraints: [],
                    eta_envs: EtaEnvs(
                        [],
                    ),
                    expr: Arrow(
                        Literal(
                            Constructor(
                                DataConstructor {
                                    modifier: None,
                                    ident: ExistsIdent(
                                        ExistsIdent(
                                            "Int",
                                        ),
                                    ),
                                    args: [],
                                },
                            ),
                        ),
                        Arrow(
                            Literal(
                                Constructor(
                                    DataConstructor {
                                        modifier: None,
                                        ident: ExistsIdent(
                                            ExistsIdent(
                                                "Int",
                                            ),
                                        ),
                                        args: [],
                                    },
                                ),
                            ),
                            Literal(
                                Constructor(
                                    DataConstructor {
                                        modifier: None,
                                        ident: ForallIdent(
                                            ForallIdent(
                                                "a",
                                            ),
                                        ),
                                        args: [],
                                    },
                                ),
                            ),
                        ),
                    ),
                },
            },
        ),
        Assign(
            Assign {
                ident: Ident(
                    "f",
                ),
                args: AssignArgs {
                    patterns: [
                        Or(
                            Literal(
                                Int(
                                    1,
                                ),
                            ),
                            Literal(
                                Int(
                                    2,
                                ),
                            ),
                        ),
                    ],
                },
                expr: Literal(
                    Int(
                        1,
                    ),
                ),
                where_clause: Module {
                    statements: [],
                },
            },
        ),
        TraitDef(
            TraitDef {
                trait_constraints: [],
                constructor: DataConstructor {
                    modifier: None,
                    ident: ExistsIdent(
                        ExistsIdent(
                            "Show",
                        ),
                    ),
                    args: [
                        Constructor(
                            DataConstructor {
                                modifier: None,
                                ident: ForallIdent(
                                    ForallIdent(
                                        "a",
                                    ),
                                ),
                                args: [],
                            },
                        ),
                    ],
                },
                where_clause: Module {
                    statements: [
                        AssignDef(
                            AssignDef {
                                ident: Ident(
                                    "show",
                                ),
                                expr: TypeExpr {
                                    trait_constraints: [],
                                    eta_envs: EtaEnvs(
                                        [],
                                    ),
                                    expr: Arrow(
                                        Literal(
                                            Constructor(
                                                DataConstructor {
                                                    modifier: None,
                                                    ident: ForallIdent(
                                                        ForallIdent(
                                                            "a",
                                                        ),
                                                    ),
                                                    args: [],
                                                },
                                            ),
                                        ),
                                        Literal(
                                            Array(
                                                Literal(
                                                    Constructor(
                                                        DataConstructor {
                                                            modifier: None,
                                                            ident: ExistsIdent(
                                                                ExistsIdent(
                                                                    "Char",
                                                                ),
                                                            ),
                                                            args: [],
                                                        },
                                                    ),
                                                ),
                                            ),
                                        ),
                                    ),
                                },
                            },
                        ),
                    ],
                },
            },
        ),
        LineComment(
            LineComment(
                "lineComment(91, 113)",
            ),
        ),
        InstDef(
            InstDef {
                ident: InstIdent(
                    "@write",
                ),
                expr: TypeExpr {
                    trait_constraints: [
                        TraitConstraint {
                            ident: TraitIdent(
                                "Show",
                            ),
                            arg: ForallIdent(
                                "a",
                            ),
                        },
                    ],
                    eta_envs: EtaEnvs(
                        [],
                    ),
                    expr: Arrow(
                        Literal(
                            Constructor(
                                DataConstructor {
                                    modifier: None,
                                    ident: ForallIdent(
                                        ForallIdent(
                                            "a",
                                        ),
                                    ),
                                    args: [],
                                },
                            ),
                        ),
                        Literal(
                            Constructor(
                                DataConstructor {
                                    modifier: None,
                                    ident: ExistsIdent(
                                        ExistsIdent(
                                            "IO",
                                        ),
                                    ),
                                    args: [],
                                },
                            ),
                        ),
                    ),
                },
            },
        ),
        HandlerDef(
            HandlerDef {
                ident: HandlerIdent(
                    "*write",
                ),
                expr: HandlerTypeDefExpr {
                    trait_constraints: [
                        TraitConstraint {
                            ident: TraitIdent(
                                "Show",
                            ),
                            arg: ForallIdent(
                                "a",
                            ),
                        },
                    ],
                    eta_envs: EtaEnvs(
                        [],
                    ),
                    expr: Literal(
                        Coroutine(
                            CoroutineType {
                                resume: Arrow(
                                    Literal(
                                        Constructor(
                                            DataConstructor {
                                                modifier: None,
                                                ident: ForallIdent(
                                                    ForallIdent(
                                                        "a",
                                                    ),
                                                ),
                                                args: [],
                                            },
                                        ),
                                    ),
                                    Literal(
                                        Tuple(
                                            0,
                                            [],
                                        ),
                                    ),
                                ),
                                ret: Literal(
                                    Constructor(
                                        DataConstructor {
                                            modifier: None,
                                            ident: ExistsIdent(
                                                ExistsIdent(
                                                    "IO",
                                                ),
                                            ),
                                            args: [],
                                        },
                                    ),
                                ),
                            },
                        ),
                    ),
                },
            },
        ),
        HandlerAssign(
            HandlerAssign {
                ident: HandlerIdent(
                    "*write",
                ),
                args: AssignArgs {
                    patterns: [
                        Bind(
                            Ident(
                                "s",
                            ),
                        ),
                    ],
                },
                expr: ApplyInst(
                    ApplyInst {
                        ident: InstIdent(
                            "@write",
                        ),
                        expr: Ident(
                            Ident(
                                "s",
                            ),
                        ),
                    },
                ),
                where_clause: Module {
                    statements: [],
                },
            },
        ),
        HandlerDef(
            HandlerDef {
                ident: HandlerIdent(
                    "*read",
                ),
                expr: HandlerTypeDefExpr {
                    trait_constraints: [],
                    eta_envs: EtaEnvs(
                        [],
                    ),
                    expr: Literal(
                        Coroutine(
                            CoroutineType {
                                resume: Literal(
                                    Constructor(
                                        DataConstructor {
                                            modifier: None,
                                            ident: ExistsIdent(
                                                ExistsIdent(
                                                    "IO",
                                                ),
                                            ),
                                            args: [],
                                        },
                                    ),
                                ),
                                ret: Literal(
                                    Constructor(
                                        DataConstructor {
                                            modifier: None,
                                            ident: ExistsIdent(
                                                ExistsIdent(
                                                    "IO",
                                                ),
                                            ),
                                            args: [],
                                        },
                                    ),
                                ),
                            },
                        ),
                    ),
                },
            },
        ),
        Assign(
            Assign {
                ident: Ident(
                    "echo",
                ),
                args: AssignArgs {
                    patterns: [
                        Bind(
                            Ident(
                                "s",
                            ),
                        ),
                    ],
                },
                expr: Ident(
                    Ident(
                        "await",
                    ),
                ),
                where_clause: Module {
                    statements: [
                        AssignDef(
                            AssignDef {
                                ident: Ident(
                                    "write",
                                ),
                                expr: TypeExpr {
                                    trait_constraints: [
                                        TraitConstraint {
                                            ident: TraitIdent(
                                                "Show",
                                            ),
                                            arg: ForallIdent(
                                                "a",
                                            ),
                                        },
                                    ],
                                    eta_envs: EtaEnvs(
                                        [],
                                    ),
                                    expr: Literal(
                                        Coroutine(
                                            CoroutineType {
                                                resume: Arrow(
                                                    Literal(
                                                        Constructor(
                                                            DataConstructor {
                                                                modifier: None,
                                                                ident: ForallIdent(
                                                                    ForallIdent(
                                                                        "a",
                                                                    ),
                                                                ),
                                                                args: [],
                                                            },
                                                        ),
                                                    ),
                                                    Literal(
                                                        Constructor(
                                                            DataConstructor {
                                                                modifier: None,
                                                                ident: ExistsIdent(
                                                                    ExistsIdent(
                                                                        "IO",
                                                                    ),
                                                                ),
                                                                args: [],
                                                            },
                                                        ),
                                                    ),
                                                ),
                                                ret: Literal(
                                                    Constructor(
                                                        DataConstructor {
                                                            modifier: None,
                                                            ident: ExistsIdent(
                                                                ExistsIdent(
                                                                    "IO",
                                                                ),
                                                            ),
                                                            args: [],
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    ),
                                },
                            },
                        ),
                        Assign(
                            Assign {
                                ident: Ident(
                                    "write",
                                ),
                                args: AssignArgs {
                                    patterns: [],
                                },
                                expr: ApplyEff(
                                    ApplyEff {
                                        ident: HandlerIdent(
                                            "*write",
                                        ),
                                        expr: Literal(
                                            Unit,
                                        ),
                                    },
                                ),
                                where_clause: Module {
                                    statements: [],
                                },
                            },
                        ),
                    ],
                },
            },
        ),
        AssignDef(
            AssignDef {
                ident: Ident(
                    "main",
                ),
                expr: TypeExpr {
                    trait_constraints: [],
                    eta_envs: EtaEnvs(
                        [
                            EtaEnv {
                                ident: HandlerIdent(
                                    "write",
                                ),
                                expr: CoroutineType {
                                    resume: Literal(
                                        Tuple(
                                            0,
                                            [],
                                        ),
                                    ),
                                    ret: Literal(
                                        Constructor(
                                            DataConstructor {
                                                modifier: None,
                                                ident: ExistsIdent(
                                                    ExistsIdent(
                                                        "IO",
                                                    ),
                                                ),
                                                args: [],
                                            },
                                        ),
                                    ),
                                },
                            },
                            EtaEnv {
                                ident: HandlerIdent(
                                    "b",
                                ),
                                expr: CoroutineType {
                                    resume: Literal(
                                        Tuple(
                                            0,
                                            [],
                                        ),
                                    ),
                                    ret: Literal(
                                        Constructor(
                                            DataConstructor {
                                                modifier: None,
                                                ident: ExistsIdent(
                                                    ExistsIdent(
                                                        "IO",
                                                    ),
                                                ),
                                                args: [],
                                            },
                                        ),
                                    ),
                                },
                            },
                        ],
                    ),
                    expr: Literal(
                        Constructor(
                            DataConstructor {
                                modifier: None,
                                ident: ExistsIdent(
                                    ExistsIdent(
                                        "IO",
                                    ),
                                ),
                                args: [],
                            },
                        ),
                    ),
                },
            },
        ),
        Assign(
            Assign {
                ident: Ident(
                    "main",
                ),
                args: AssignArgs {
                    patterns: [],
                },
                expr: Ident(
                    Ident(
                        "echo",
                    ),
                ),
                where_clause: Module {
                    statements: [],
                },
            },
        ),
    ],
}
