f 1  2 = a * b
trait Show a where {
 a :: Int
 (++) = a -> a -> a
}

(++) = a

// List a :: [a]
// trait List a = {
//   id = []
//   (:) x [] = [x]
//   (:) a a = # : ## : id
//   (:) a [a] = # : ##
// } & Identity

// type Text :: [Char]

// trait Text where {
//   id = ""
//   (++) x y = x : y
// } & Identity
//
// trait Identity a = {
//   id :: a -> a
// }

repeat :: Identity a => (a -> a) -> Nat
repeat f 0 = id
repeat f n = f n ++ repeat f (n - 1)

repeatText :: Text Nat
repeatText s n = repeat s n

hardbrakeN :: Nat
hardbreakN n = repeatText "\n" n

hardbreak = hardbreakN 1

(|) :: a -> (a -> b) -> b
(|) f g = g f

main :: <write: <Text -> IO (), IO ()>, read: <IO Char, IO ()>, none: <(), ()>> IO ()
main = eff *write "Hello world"

// handlers H = {
//   write s :: Text -> IO ()
//   write s = @write s
//
//   writeLn s :: <write: Text -> IO ()> Text -> IO()
//   writeLn s = eff write (s ++ "\n")
// }

main = eff *write "Hello world"
