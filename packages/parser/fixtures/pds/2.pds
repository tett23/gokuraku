f 1  2 = a * b
trait Show a = {
 a = 1
 (++) = 1
} & Show

(++) = a
trait Show = {a = 1}

List a = [a]
trait List a = {
  id = []
  (:) x [] = [x]
  (:) a a = # : ## : id
  (:) a [a] = # : ##
} & Identity

Text = List char

trait Text = {
  id = ""
  (++) x y = x : y
} & Identity

trait Identity a = {
  id :: a
}

repeat :: Identity a => (a -> a) Nat
repeat f 0 = id
repeat f n = f n ++ repeat f (n - 1)

repeatText :: Text Nat
repeatText s n = repeat s n

hardbrakeN :: Nat
hardbreakN n = repeatText "\n" n

hardbreak = hardbreakN 1

(|) :: a -> (a -> b) -> b
(|) f g = g f

<write: Text -> IO (), read: IO Text, none: ()> main :: IO ()
main = eff write "Hello world"

handlers H = {
  write s :: Text -> IO ()
  write s = @write s

  <write: Text -> IO ()> writeLn s :: Text -> IO()
  writeLn s = eff write (s ++ "\n")
}

H<{
  main = eff write "Hello world"
}>
